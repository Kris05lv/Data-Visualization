<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>US GDP Bar Chart</title>
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <style>
        .container {
            max-width: 900px;
            margin: 0 auto;
            padding: 20px;
        }
        .bar {
            fill: steelblue;
            transition: opacity 0.3s;
        }
        .bar:hover {
            opacity: 0.8;
        }
        #tooltip {
            position: absolute;
            padding: 10px;
            background: rgba(0, 0, 0, 0.8);
            color: white;
            border-radius: 4px;
            pointer-events: none;
            display: none;
        }
        .tick text {
            font-size: 12px;
        }
        .axis-label {
            font-size: 14px;
            fill: #333;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1 id="title">United States GDP</h1>
        <div id="chart"></div>
        <div id="tooltip"></div>
    </div>

    <script>
        // Constants for chart dimensions
        const margin = { top: 40, right: 40, bottom: 60, left: 80 };
        const width = 800 - margin.left - margin.right;
        const height = 400 - margin.top - margin.bottom;

        // Create SVG container
        const svg = d3.select('#chart')
            .append('svg')
            .attr('width', width + margin.left + margin.right)
            .attr('height', height + margin.top + margin.bottom)
            .append('g')
            .attr('transform', `translate(${margin.left},${margin.top})`);

        // Fetch and process data
        fetch('https://raw.githubusercontent.com/freeCodeCamp/ProjectReferenceData/master/GDP-data.json')
            .then(response => response.json())
            .then(data => {
                const dataset = data.data;

                // Create scales
                const xScale = d3.scaleTime()
                    .domain([new Date(dataset[0][0]), new Date(dataset[dataset.length - 1][0])])
                    .range([0, width]);

                const yScale = d3.scaleLinear()
                    .domain([0, d3.max(dataset, d => d[1])])
                    .range([height, 0]);

                // Create axes
                const xAxis = d3.axisBottom(xScale);
                const yAxis = d3.axisLeft(yScale);

                // Add x-axis
                svg.append('g')
                    .attr('id', 'x-axis')
                    .attr('transform', `translate(0,${height})`)
                    .call(xAxis);

                // Add y-axis
                svg.append('g')
                    .attr('id', 'y-axis')
                    .call(yAxis);

                // Add axis labels
                svg.append('text')
                    .attr('class', 'axis-label')
                    .attr('text-anchor', 'middle')
                    .attr('transform', 'rotate(-90)')
                    .attr('y', -margin.left + 20)
                    .attr('x', -height/2)
                    .text('Gross Domestic Product (Billions)');

                svg.append('text')
                    .attr('class', 'axis-label')
                    .attr('text-anchor', 'middle')
                    .attr('x', width/2)
                    .attr('y', height + margin.bottom - 10)
                    .text('Year');

                // Add bars
                const barWidth = Math.floor(width / dataset.length) - 1;
                
                svg.selectAll('.bar')
                    .data(dataset)
                    .enter()
                    .append('rect')
                    .attr('class', 'bar')
                    .attr('data-date', d => d[0])
                    .attr('data-gdp', d => d[1])
                    .attr('x', d => xScale(new Date(d[0])))
                    .attr('y', d => yScale(d[1]))
                    .attr('width', barWidth)
                    .attr('height', d => height - yScale(d[1]))
                    .on('mouseover', function(event, d) {
                        const tooltip = d3.select('#tooltip');
                        const date = new Date(d[0]);
                        const formattedGDP = new Intl.NumberFormat('en-US', {
                            style: 'currency',
                            currency: 'USD',
                            minimumFractionDigits: 1,
                            maximumFractionDigits: 1
                        }).format(d[1] + 'B');

                        tooltip
                            .style('display', 'block')
                            .style('left', (event.pageX + 10) + 'px')
                            .style('top', (event.pageY - 28) + 'px')
                            .attr('data-date', d[0])
                            .html(`${date.getFullYear()} Q${Math.floor(date.getMonth() / 3) + 1}<br>${formattedGDP}`);
                    })
                    .on('mouseout', function() {
                        d3.select('#tooltip').style('display', 'none');
                    });
            });
    </script>
</body>
</html>
