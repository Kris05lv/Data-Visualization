<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Global Temperature Heat Map</title>
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <style>
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        #title {
            text-align: center;
            margin-bottom: 0;
        }
        #description {
            text-align: center;
            color: #666;
            margin-bottom: 30px;
        }
        .cell {
            stroke: #fff;
            stroke-width: 0.5px;
            transition: stroke-width 0.2s;
        }
        .cell:hover {
            stroke: #000;
            stroke-width: 2px;
        }
        #tooltip {
            position: absolute;
            padding: 10px;
            background: rgba(0, 0, 0, 0.9);
            color: white;
            border-radius: 4px;
            pointer-events: none;
            display: none;
            font-size: 14px;
        }
        .tick text {
            font-size: 12px;
        }
        .axis-label {
            font-size: 14px;
            fill: #333;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1 id="title">Monthly Global Land-Surface Temperature</h1>
        <h2 id="description">1753 - 2015: base temperature 8.66℃</h2>
        <div id="chart"></div>
        <div id="tooltip"></div>
    </div>

    <script>
        // Constants for chart dimensions
        const margin = { top: 40, right: 40, bottom: 100, left: 100 };
        const width = 1000 - margin.left - margin.right;
        const height = 500 - margin.top - margin.bottom;

        // Create SVG container
        const svg = d3.select('#chart')
            .append('svg')
            .attr('width', width + margin.left + margin.right)
            .attr('height', height + margin.top + margin.bottom)
            .append('g')
            .attr('transform', `translate(${margin.left},${margin.top})`);

        // Color scale for temperature variance
        const colorScale = d3.scaleQuantize()
            .domain([2, 12])
            .range([
                '#4575b4', // Cold blue
                '#74add1',
                '#abd9e9',
                '#e0f3f8',
                '#fee090',
                '#fdae61',
                '#f46d43',
                '#d73027'  // Hot red
            ]);

        // Fetch and process data
        fetch('https://raw.githubusercontent.com/freeCodeCamp/ProjectReferenceData/master/global-temperature.json')
            .then(response => response.json())
            .then(data => {
                const baseTemp = data.baseTemperature;
                const monthlyData = data.monthlyVariance;

                // Update description with base temperature
                d3.select('#description')
                    .text(`${d3.min(monthlyData, d => d.year)} - ${d3.max(monthlyData, d => d.year)}: base temperature ${baseTemp}℃`);

                // Create scales
                const xScale = d3.scaleLinear()
                    .domain([d3.min(monthlyData, d => d.year), d3.max(monthlyData, d => d.year)])
                    .range([0, width]);

                const yScale = d3.scaleBand()
                    .domain([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])
                    .range([0, height])
                    .padding(0);

                // Create axes
                const xAxis = d3.axisBottom(xScale)
                    .tickFormat(d3.format('d'));

                const yAxis = d3.axisLeft(yScale)
                    .tickFormat(month => {
                        const date = new Date(0);
                        date.setUTCMonth(month);
                        return d3.timeFormat('%B')(date);
                    });

                // Add x-axis
                svg.append('g')
                    .attr('id', 'x-axis')
                    .attr('transform', `translate(0,${height})`)
                    .call(xAxis);

                // Add y-axis
                svg.append('g')
                    .attr('id', 'y-axis')
                    .call(yAxis);

                // Calculate cell dimensions
                const cellWidth = width / (d3.max(monthlyData, d => d.year) - d3.min(monthlyData, d => d.year));
                const cellHeight = height / 12;

                // Add cells
                svg.selectAll('.cell')
                    .data(monthlyData)
                    .enter()
                    .append('rect')
                    .attr('class', 'cell')
                    .attr('x', d => xScale(d.year))
                    .attr('y', d => yScale(d.month - 1))
                    .attr('width', cellWidth)
                    .attr('height', cellHeight)
                    .attr('data-month', d => d.month - 1)
                    .attr('data-year', d => d.year)
                    .attr('data-temp', d => baseTemp + d.variance)
                    .style('fill', d => colorScale(baseTemp + d.variance))
                    .on('mouseover', function(event, d) {
                        const date = new Date(0);
                        date.setUTCMonth(d.month - 1);
                        const monthName = d3.timeFormat('%B')(date);
                        const temp = (baseTemp + d.variance).toFixed(1);
                        const variance = d.variance.toFixed(1);

                        d3.select('#tooltip')
                            .style('display', 'block')
                            .style('left', (event.pageX + 10) + 'px')
                            .style('top', (event.pageY - 28) + 'px')
                            .attr('data-year', d.year)
                            .html(`${d.year} - ${monthName}<br>
                                ${temp}℃<br>
                                ${variance}℃ variance`);
                    })
                    .on('mouseout', function() {
                        d3.select('#tooltip').style('display', 'none');
                    });

                // Add legend
                const legendWidth = 400;
                const legendHeight = 20;
                const legendValues = colorScale.range().map((d, i) => 
                    2 + (i * (12 - 2) / (colorScale.range().length - 1)));

                const legendScale = d3.scaleLinear()
                    .domain([2, 12])
                    .range([0, legendWidth]);

                const legend = svg.append('g')
                    .attr('id', 'legend')
                    .attr('transform', `translate(${(width - legendWidth) / 2},${height + 50})`);

                legend.selectAll('rect')
                    .data(legendValues)
                    .enter()
                    .append('rect')
                    .attr('x', (d, i) => i * (legendWidth / legendValues.length))
                    .attr('width', legendWidth / legendValues.length)
                    .attr('height', legendHeight)
                    .style('fill', d => colorScale(d));

                const legendAxis = d3.axisBottom(legendScale)
                    .tickFormat(d => `${d.toFixed(1)}℃`)
                    .tickValues(legendValues);

                legend.append('g')
                    .attr('transform', `translate(0,${legendHeight})`)
                    .call(legendAxis);

                legend.append('text')
                    .attr('class', 'axis-label')
                    .attr('text-anchor', 'middle')
                    .attr('x', legendWidth / 2)
                    .attr('y', legendHeight + 40)
                    .text('Temperature (℃)');
            });
    </script>
</body>
</html>
